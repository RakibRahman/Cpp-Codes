#include <iostream>
The preprocessor runs before the compiler does its thing and substitutes text
based on various directives.

the modulus operator ( % ). The modulus operator returns the remainder of integer
division. In this case, 7 % 3 produces the remainder of 7 / 3 , which is 1 ..

Multiplication, division, and modulus
have equal precedence, which is higher than the precedence level that
addition and subtraction share. * then / then + then - ...

\n , which represents a new line. Another useful escape sequence is \t , which acts as a
tab.

signed and unsigned are modifiers that work only with integer types. signed
means that a variable can store both positive and negative values, while
unsigned means that a variable can store only positive values.

 short is a modifier that can reduce the
total number of values a variable can hold. long is a modifier that can
increase the total number of values a variable can hold. short may decrease
the storage space required for a variable while long may increase it. short
and long can modify int . long can also modify double .

short int can be written as just short, and long
int can be written as just long 

Typedef C++

C++ allows you to define explicitly new data type names by using the keyword typedef. Using typedef doest not actually create a new data class, rather it defines a new name for an existing type. This can increase the portability of a programas only the typedef statements would have to be changed. Syntax:

typedef existing_type new_type_name ;

When you place the operator before the variable, the operator is
called the prefix increment operator; when you place it after the variable, it’s
called the postfix increment operator.

Dealing with Integer Wrap Around
What happens when you increase an integer variable beyond its maximum
value? It turns out you don’t generate an error. Instead, the value “wraps
around” to the type’s minimum value.
Decrementing an integer variable beyond its minimum value “wraps it
around” to its maximum.

You can’t assign a new value to a constant. If you try, you’ll generate a
compile error.

Using Enumerations
An enumeration is a set of unsigned int constants, called enumerators.
Usually the enumerators are related and have a particular order. Here’s an
example of an enumeration:
enum difficulty {NOVICE, EASY, NORMAL, HARD, UNBEATABLE};
This defines an enumeration named difficulty . By default, the value of
enumerators begins at zero and increases by one. So NOVICE is 0 , EASY is 1 ,
NORMAL is 2 , HARD is 3 , and UNBEATABLE is 4 . That means myDifficulty can only be assigned NOVICE , EASY ,
NORMAL , HARD , UNBEATABLE , 0 , 1 , 2 , 3 , or 4 

he basic lifecycle of a C++ program is idea, plan, source code, object
file, executable.
Programming errors tend to fall into three categories—compile errors,
link errors, and run-time errors.
A function is a group of programming statements that can do some work
and return a value.
Every program must contain a main() function, which is the starting
point of the program.
The #include directive tells the preprocessor to include another file in
the current one.
The standard library is a set of files that you can include in your
program files to handle basic functions like input and output.
iostream , which is part of the standard library, is a file that contains
code to help with standard input and output.
The std namespace includes elements from the standard library. To
access an element from the namespace, you need to prefix the element
with std:: or employ using .
ou can use typedef to create a new name for an existing type.
A constant is a name for an unchangeable value.
An enumeration is a sequence of unsigned int constants.

